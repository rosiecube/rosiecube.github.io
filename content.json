{"meta":{"title":"rosiecube","subtitle":"게임 만들기 블로그","description":"게임 만들기 블로그","author":"rosiecube","url":"https://rosiecube.github.io","root":"/"},"pages":[{"title":"About","date":"2019-08-18T06:23:43.000Z","updated":"2019-08-18T11:47:24.578Z","comments":true,"path":"about/index.html","permalink":"https://rosiecube.github.io/about/index.html","excerpt":"","text":"새로운 것을 배우고 노트하는것을 좋아해 Markdown으로 노트를 작성하고 올리기 위한 블로그를 운영중 입니다."},{"title":"Category","date":"2019-08-29T13:15:03.619Z","updated":"2019-08-29T13:15:03.619Z","comments":true,"path":"category/index.html","permalink":"https://rosiecube.github.io/category/index.html","excerpt":"","text":""},{"title":"Tag","date":"2019-08-29T13:14:56.096Z","updated":"2019-08-29T13:14:56.096Z","comments":true,"path":"tag/index.html","permalink":"https://rosiecube.github.io/tag/index.html","excerpt":"","text":""}],"posts":[{"title":"조건문 (Conditional Statement)","slug":"programming/c++/conditional-statement","date":"2019-09-02T04:30:00.000Z","updated":"2019-09-02T06:30:47.418Z","comments":true,"path":"2019/09/02/programming/c++/conditional-statement/","link":"","permalink":"https://rosiecube.github.io/2019/09/02/programming/c++/conditional-statement/","excerpt":"","text":"if 문복잡한 조건을 확인하기 위해서 사용 123456789101112if (조건)&#123; &#125;else if (조건)&#123; &#125;else&#123; &#125; switch 문if 문 보다 조금 더 빠라 가능하다면 switch 문을 사용 123456789101112switch (조건 확인용 변수)&#123; case 값1: break; case 값2: break; default: break;&#125; case 안에서 변수를 선언 할때는 {}(중괄호)를 꼭 해야한다.12345678910111213char c = 'a';switch (c)&#123; case 'a': int a = 10; // 오류 C2361 'a' 초기화가 'default' 레이블에 의해 생략되었습니다. break; default: break;&#125; 1234567891011121314char c = 'a';switch (c)&#123; case 'a': &#123; int a = 10; break; &#125; default: break;&#125; 홀수 짝수 확인소스12345678910111213141516171819#include &lt;stdio.h&gt;int main()&#123; int n = 0; scanf_s(\"%d\", &amp;n); printf(\"n : %d\\n\", n); if (n % 2) &#123; // 나머지가 1인 경우 (홀수) printf(\"홀수 입니다.\\n\"); &#125; else &#123; printf(\"짝수 입니다.\\n\"); &#125;&#125; 실행 화면 11236n : 6짝수 입니다. 실행 화면 21235n : 5홀수 입니다. 문자 확인 (switch 문)소스123456789101112131415161718192021222324#include &lt;stdio.h&gt;int main()&#123; char c = 0; printf(\"문자를 입력하시오\\n\"); // scanf_s 는 문자를 입력할때 뒤에 꼭 문자 길이를 넣어줘야 한다. scanf_s(\"%c\", &amp;c, 1); switch (c) &#123; case 'a': printf(\"a를 입력했습니다.\\n\"); break; case 'b': printf(\"b를 입력했습니다.\\n\"); break; default: printf(\"조건에 없는 문자입니다.\\n\"); break; &#125;&#125; 실행 화면 1123문자를 입력하시오aa를 입력했습니다. 실행 화면 2123문자를 입력하시오bb를 입력했습니다. 실행 화면 3123문자를 입력하시오h조건에 없는 문자입니다. 문자 확인 (if 문)소스123456789101112131415161718192021222324#include &lt;stdio.h&gt;int main()&#123; char c = 0; printf(\"문자를 입력하시오\\n\"); // scanf_s 는 문자를 입력할때 뒤에 꼭 문자 길이를 넣어줘야 한다. scanf_s(\"%c\", &amp;c, 1); if (c == 'a') &#123; printf(\"a를 입력했습니다.\\n\"); &#125; else if (c == 'b') &#123; printf(\"b를 입력했습니다.\\n\"); &#125; else &#123; printf(\"조건에 없는 문자입니다.\\n\"); &#125;&#125; 실행 화면 1123문자를 입력하시오aa를 입력했습니다. 실행 화면 2123문자를 입력하시오bb를 입력했습니다. 실행 화면 3123문자를 입력하시오h조건에 없는 문자입니다.","categories":[{"name":"programming","slug":"programming","permalink":"https://rosiecube.github.io/categories/programming/"},{"name":"c++","slug":"programming/c","permalink":"https://rosiecube.github.io/categories/programming/c/"}],"tags":[]},{"title":"연산자 (Operator)","slug":"programming/c++/operator","date":"2019-09-02T04:20:00.000Z","updated":"2019-09-02T06:29:34.284Z","comments":true,"path":"2019/09/02/programming/c++/operator/","link":"","permalink":"https://rosiecube.github.io/2019/09/02/programming/c++/operator/","excerpt":"","text":"기본 연산자 대입 연산자 조건 연산자 논리 연산자 + = &gt; &amp;&amp; (그리고) - += &lt; || (또는) * -= &gt;= / *= &lt;= % /= == %= 기본 연산자소스12345678#include &lt;stdio.h&gt;int main()&#123; int x = 10, y = 20; printf(\"%d + %d = %d\\n\", x, y, x + y);&#125; 실행 화면110 + 20 = 30 대입 연산자소스12345678910#include &lt;stdio.h&gt;int main()&#123; int x = 10, y = 20; x += 30; // x = x + 30; printf(\"%d + %d = %d\\n\", x, y, x + y);&#125; 실행 화면140 + 20 = 60 조건 연산자소스123456789#include &lt;stdio.h&gt;int main()&#123; int x = 40, y = 20; printf(\" %d &lt; %d = %d\\n\", x, y, x &lt; y); printf(\" %d &gt; %d = %d\\n\", x, y, x &gt; y);&#125; 실행 화면1240 &lt; 20 = 040 &gt; 20 = 1 논리 연산자소스123456789101112131415#include &lt;stdio.h&gt;int main()&#123; int x = 40, y = 20, z = 30; printf( \"%d는 %d보다 크고 %d 보다 작다 = %d\\n\", x, y, z, x &gt; y &amp;&amp; x &lt; z ); printf( \"%d는 %d보다 크거나 %d 보다 작다 = %d\\n\", x, y, z, x &gt; y || x &lt; z );&#125; 실행 화면1240는 20보다 크고 30 보다 작다 = 040는 20보다 크거나 30 보다 작다 = 1","categories":[{"name":"programming","slug":"programming","permalink":"https://rosiecube.github.io/categories/programming/"},{"name":"c++","slug":"programming/c","permalink":"https://rosiecube.github.io/categories/programming/c/"}],"tags":[]},{"title":"표준 입출력 라이브러리","slug":"programming/c++/standard-input-output-library","date":"2019-09-02T04:10:00.000Z","updated":"2019-09-02T06:34:10.660Z","comments":true,"path":"2019/09/02/programming/c++/standard-input-output-library/","link":"","permalink":"https://rosiecube.github.io/2019/09/02/programming/c++/standard-input-output-library/","excerpt":"","text":"Hello World 출력소스123456#include &lt;stdio.h&gt;int main()&#123; printf(\"Hello World\");&#125; 실행 화면1Hello World 변수 출력소스12345678910111213#include &lt;stdio.h&gt;int main()&#123; char blood = 'B'; int age = 29; float tall = 179.99f; printf(\"내 혈액형은 %c 입니다. \\n\", blood); printf(\"내 나이는 %d 입니다. \\n\", age); // 10 진수 printf(\"내 나이는 %x 입니다. \\n\", age); // 16 진수 printf(\"내 키는 %.2f 입니다. \\n\", tall); // 2째 자리수 까지 출력&#125; 실행 화면1234내 혈액형은 B 입니다. 내 나이는 29 입니다. 내 나이는 1d 입니다. 내 키는 179.99 입니다. 변수 입력소스12345678910111213141516#include &lt;stdio.h&gt;int main()&#123; int n = 0; //scanf(\"%d\", &amp;n); // 오류 C4996 'scanf': // This function or variable may be unsafe. // Consider using scanf_s instead. // To disable deprecation, use _CRT_SECURE_NO_WARNINGS. // See online help for details. scanf_s(\"%d\", &amp;n); printf(\"n : %d\\n\", n);&#125; 실행 화면1210n : 10","categories":[{"name":"programming","slug":"programming","permalink":"https://rosiecube.github.io/categories/programming/"},{"name":"c++","slug":"programming/c","permalink":"https://rosiecube.github.io/categories/programming/c/"}],"tags":[]},{"title":"변수 (Variable)","slug":"programming/c++/variable","date":"2019-09-02T04:00:00.000Z","updated":"2019-09-02T06:29:02.155Z","comments":true,"path":"2019/09/02/programming/c++/variable/","link":"","permalink":"https://rosiecube.github.io/2019/09/02/programming/c++/variable/","excerpt":"","text":"8 bit = 1 byte 첫번째 비트는 음수 양수 정수 실수 char 1 byte -2^7 ~ 2^7 - 1 float 4 byte short 2 byte -2^15 ~ 2^15 - 1 double 8 byte int 4 byte long 4 byte 정수 int 와 long 의 크기는 운영체제나 컴파일러 기준으로 크기가 다름 윈도우에서는 무조건 4 byte 컴파일러 상관없이 이유: 16 비트 컴퓨터였을때 int 가 2 byte long 은 4 byte 2 byte 를 위해서 short 를 만듬 상황에 따라서 크기가 다를 수 있음 실수 게임에서는 통상적으로 float 을 많이 씀 지수, 부수 로 나뉘어 있음 1234567891011121314int main()&#123; // 자료형 변수이름 = 초기값; char blood = 'B'; int age = 33; float tall = 179.99f; //float tall = 179.99; // Variable.cpp(8,24): warning C4305: '초기화 중': 'double'에서 'float'(으)로 잘립니다. // 프로그래밍 할때는 Warning 을 최대한 없애는게 좋음 return 0; // 최신 컴파일러에서는 없어도 됨.&#125; 변수 선언 유의사항1. 같은 이름의 변수를 중복해서 선언 할 수 없다.123456int main()&#123; char blood = 'B'; double blood = 13.22; // 오류 C2371 'blood': 재정의. 기본 형식이 다릅니다.&#125; 2. 변수 이름 제일 앞에는 숫자가 올 수 없다. (뒤에나 중간엔 가능)12345int main()&#123; char 0blood = 'B'; // 오류 C2059 구문 오류: '숫자의 접미사가 잘못되었습니다.'&#125; 3. 변수 중간에 띄어쓰기를 할 수 없다.12345int main()&#123; char my blood = 'B'; // 오류 C2065 'blood': 선언되지 않은 식별자입니다.&#125; 4. 특수문자를 사용 할 수 없다. 단 _ 제외12345int main()&#123; char @blood = 'B'; // 오류 C2018 '0x40' 문자를 인식할 수 없습니다.&#125; 네이밍 규칙 참조 사이트: https://shrimk-coding.tistory.com/1 변수 이름 찾는 사이트: https://www.curioustore.com/#!/ Unity 에서 C# 을 쓰면서 C# 네이밍 규칙을 따라서 사용하게 됨 카멜 표기법 시작할 때 소문자로 시작해서 띄어쓰기 하는 부분에서 대문자 변수 이름에 사용 파스칼 표기법 대문자로 시작 함수 이름에 사용 변수 데이터 변경12345678910#include &lt;stdio.h&gt;int main()&#123; char blood = 'B'; printf(\"내 혈액형은 %c 입니다. \\n\", blood); blood = 'A'; printf(\"내 혈액형은 %c 입니다. \\n\", blood);&#125;","categories":[{"name":"programming","slug":"programming","permalink":"https://rosiecube.github.io/categories/programming/"},{"name":"c++","slug":"programming/c","permalink":"https://rosiecube.github.io/categories/programming/c/"}],"tags":[]},{"title":"cpp 파일 빌드에서 제외","slug":"programming/c++/exclude-from-build-cpp-file","date":"2019-09-02T03:50:00.000Z","updated":"2019-09-02T06:28:32.689Z","comments":true,"path":"2019/09/02/programming/c++/exclude-from-build-cpp-file/","link":"","permalink":"https://rosiecube.github.io/2019/09/02/programming/c++/exclude-from-build-cpp-file/","excerpt":"","text":"중복되는 함수가 있을 때 임시로 빌드에서 제외하기 위함 제외할 소스 우측 마우스 속성 구성 속성 - 일반 빌드에서 제외 = 예 확인","categories":[{"name":"programming","slug":"programming","permalink":"https://rosiecube.github.io/categories/programming/"},{"name":"c++","slug":"programming/c","permalink":"https://rosiecube.github.io/categories/programming/c/"}],"tags":[]},{"title":"디버깅 방법","slug":"programming/c++/how-to-debug","date":"2019-09-02T03:40:00.000Z","updated":"2019-09-02T06:28:36.165Z","comments":true,"path":"2019/09/02/programming/c++/how-to-debug/","link":"","permalink":"https://rosiecube.github.io/2019/09/02/programming/c++/how-to-debug/","excerpt":"","text":"멈추고 싶은 줄에 브레이크 포인트를 찍는다. F9 마우스로 왼쪽 디버깅 시작 디버그(D) - 디버깅 시작(S) F5 브레이크 포인트에 노란색 화살표가 들어오는지 확인 F10을 이용해서 다음 줄로 이동하거나 다음 브레이크 포인트를 잡고 계속(F5)을 눌러준다.","categories":[{"name":"programming","slug":"programming","permalink":"https://rosiecube.github.io/categories/programming/"},{"name":"c++","slug":"programming/c","permalink":"https://rosiecube.github.io/categories/programming/c/"}],"tags":[]},{"title":"디버깅 시작","slug":"programming/c++/debug-start","date":"2019-09-02T03:30:00.000Z","updated":"2019-09-02T06:28:30.096Z","comments":true,"path":"2019/09/02/programming/c++/debug-start/","link":"","permalink":"https://rosiecube.github.io/2019/09/02/programming/c++/debug-start/","excerpt":"","text":"디버그(D) - 디버깅 시작(S) F5 디버그(D) - 디버그하지 않고 시작(H) Ctrl+F5 개발 당시에는 이렇게 실행하지 말 것","categories":[{"name":"programming","slug":"programming","permalink":"https://rosiecube.github.io/categories/programming/"},{"name":"c++","slug":"programming/c","permalink":"https://rosiecube.github.io/categories/programming/c/"}],"tags":[]},{"title":"간략하게 설명한 컴파일 순서","slug":"programming/c++/brief-description-compile-order","date":"2019-09-02T03:20:00.000Z","updated":"2019-09-02T06:27:14.316Z","comments":true,"path":"2019/09/02/programming/c++/brief-description-compile-order/","link":"","permalink":"https://rosiecube.github.io/2019/09/02/programming/c++/brief-description-compile-order/","excerpt":"","text":"전처리기 라이브러리 읽기 주석 삭제12// 주석 1/* 주석 2 */ 컴파일 빌드(B) - 컴파일(M) Ctrl+F7 C++ 파일을 Assembly 로 변환 문법 틀린것을 찾을 때 좋음 어셈블러 Assembly 를 기계어로 변환 링커 라이브러리, 스크립트 들을 처리해줌 빌드","categories":[{"name":"programming","slug":"programming","permalink":"https://rosiecube.github.io/categories/programming/"},{"name":"c++","slug":"programming/c","permalink":"https://rosiecube.github.io/categories/programming/c/"}],"tags":[]},{"title":"프로젝트에 cpp 파일 추가","slug":"programming/c++/add-cpp-file-in-project","date":"2019-09-02T03:10:00.000Z","updated":"2019-09-02T06:25:22.812Z","comments":true,"path":"2019/09/02/programming/c++/add-cpp-file-in-project/","link":"","permalink":"https://rosiecube.github.io/2019/09/02/programming/c++/add-cpp-file-in-project/","excerpt":"","text":"“소스 파일” 우측 마우스 “새 항목” 클릭 “C++ 파일(.cpp)” 클릭 파일 이름 정하기 추가","categories":[{"name":"programming","slug":"programming","permalink":"https://rosiecube.github.io/categories/programming/"},{"name":"c++","slug":"programming/c","permalink":"https://rosiecube.github.io/categories/programming/c/"}],"tags":[]},{"title":"c++ 프로젝트 만들기","slug":"programming/c++/make-c++-project","date":"2019-09-02T03:00:00.000Z","updated":"2019-09-02T06:25:12.410Z","comments":true,"path":"2019/09/02/programming/c++/make-c++-project/","link":"","permalink":"https://rosiecube.github.io/2019/09/02/programming/c++/make-c++-project/","excerpt":"","text":"Window 데스크톱 마법사 프로젝트 이름 정하기 위치 설정 만들기 콘솔 애플리케이션(.exe) 빈 프로젝트 확인","categories":[{"name":"programming","slug":"programming","permalink":"https://rosiecube.github.io/categories/programming/"},{"name":"c++","slug":"programming/c","permalink":"https://rosiecube.github.io/categories/programming/c/"}],"tags":[]},{"title":"Visual Studio 2019 Community 설치","slug":"programming/c++/install-visual-studio-2019-community","date":"2019-08-30T03:00:00.000Z","updated":"2019-09-02T06:28:40.958Z","comments":true,"path":"2019/08/30/programming/c++/install-visual-studio-2019-community/","link":"","permalink":"https://rosiecube.github.io/2019/08/30/programming/c++/install-visual-studio-2019-community/","excerpt":"","text":"다운로드https://visualstudio.microsoft.com/ko/ visual studio 검색 Community 2019 다운로드 (학습용) 설치C++를 사용한 데스크톱 개발 체크 후 설치","categories":[{"name":"programming","slug":"programming","permalink":"https://rosiecube.github.io/categories/programming/"},{"name":"c++","slug":"programming/c","permalink":"https://rosiecube.github.io/categories/programming/c/"}],"tags":[]},{"title":"Unmanaged Language 배워야 하는 이유","slug":"programming/why-learn-unmanaged-language","date":"2019-08-18T08:15:23.000Z","updated":"2019-08-30T02:51:50.211Z","comments":true,"path":"2019/08/18/programming/why-learn-unmanaged-language/","link":"","permalink":"https://rosiecube.github.io/2019/08/18/programming/why-learn-unmanaged-language/","excerpt":"","text":"Managed Language 프로그래머라도 Unmanaged Language로 컴퓨터를 이해할 수 있도록 시간을 들여야 한다.빨리 직장에 들어가는 것만 생각하지 말고 꾸준히 만족할 수 있게 준비하자. Unmanaged Language 에서만 배울 수 있는 것 메모리 동작 원리 CPU 동작 원리 컴퓨터처럼 생각하는 방법 Managed Language에서 지원하는 모든 기능들의 동작원리 이른 시기에 컴퓨터를 이해하면 빠르게 성장 (2~3 배)하드웨어를 이해하면 같은 로직이어도 버그가 적고 효율적인 코드를 짤 수 있다. Unmanaged Launguage 공부기간최소한 1년 이상 생각하면서 써야 한다. 향후 10년 커리어에 대한 고민 여전히 프로그래머로서 일하고 싶은가? 단기 직장 X 10년 후 직업만족도 돈을 얼마나 버는지 더 높은 연봉을 받고 싶은가? 장기적인 커리어 보장 과목에 초점 C/C++ (Unmanaged Language) 기본기와 하드웨어 공부에 집중 컴퓨터 아키텍처 기타 등등 References https://www.udemy.com/cpp-unmanaged-programming-by-pocu/","categories":[{"name":"programming","slug":"programming","permalink":"https://rosiecube.github.io/categories/programming/"}],"tags":[]}]}